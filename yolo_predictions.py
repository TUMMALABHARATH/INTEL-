# -*- coding: utf-8 -*-
"""yolo_predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MR73doXuWA87XDDRVxim5DsnH_WpelDf
"""

!pip install PyYAML

import cv2
import numpy as np
import os

import yaml
from yaml.loader import SafeLoader

# load YAML
with open('data.yaml',mode='r') as f:
    data_yaml = yaml.load(f,Loader=SafeLoader)

labels = data_yaml['names']
print(labels)

from google.colab import drive
drive.mount('/content/drive')

import os

file_path = '/content/drive/MyDrive/yolo_object_detection/2_predictions/Model/Model/weights/best.onnx'
abs_path = os.path.abspath(file_path)
print(f"Absolute path: {abs_path}")

directory = os.path.dirname(abs_path)
if os.path.exists(directory):
    print("Directory contents:", os.listdir(directory))
else:
    print(f"The directory {directory} does not exist.")

import cv2
import os

# Correct file path with raw string
onnx_model_path = r'/content/drive/MyDrive/yolo_object_detection/2_predictions/Model/Model/weights/best.onnx'
abs_onnx_model_path = os.path.abspath(onnx_model_path)

# Print and check the absolute path
print(f"Absolute path of the ONNX model: {abs_onnx_model_path}")

# Check if the file exists
if not os.path.exists(abs_onnx_model_path):
    raise FileNotFoundError(f"The ONNX model file {abs_onnx_model_path} does not exist.")

# Load YOLO model
try:
    yolo = cv2.dnn.readNetFromONNX(abs_onnx_model_path)
    yolo.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)
    yolo.setPreferableTarget(cv2.dnn.DNN_TARGET_CPU)
    print("YOLO model loaded successfully.")
except cv2.error as e:
    raise ValueError(f"Failed to load the ONNX model from {abs_onnx_model_path}. Error: {e}")

# load the image
img = cv2.imread('/content/drive/MyDrive/yolo_object_detection/2_predictions/image.jpg')
image = img.copy()
row, col, d = image.shape


# get the YOLO prediction from the the image
# step-1 convert image into square image (array)
max_rc = max(row,col)
input_image = np.zeros((max_rc,max_rc,3),dtype=np.uint8)
input_image[0:row,0:col] = image
# step-2: get prediction from square array
INPUT_WH_YOLO = 640
blob = cv2.dnn.blobFromImage(input_image,1/255,(INPUT_WH_YOLO,INPUT_WH_YOLO),swapRB=True,crop=False)
yolo.setInput(blob)
preds = yolo.forward() # detection or prediction from YOLO

print(preds.shape)

# Non Maximum Suppression
# Step-1: Filter detection based on confidence (0.2) and probability score (0.2)
detections = preds[0]
boxes = []
confidences = []
classes = []

# Width and height of the image (input_image)
image_h, image_w = input_image.shape[:2]
x_factor = image_w / INPUT_WH_YOLO
y_factor = image_h / INPUT_WH_YOLO

for i in range(len(detections)):
    row = detections[i]
    confidence = row[4]  # Confidence of detecting an object
    if confidence > 0.2:
        class_score = row[5:].max()  # Maximum probability from objects
        class_id = row[5:].argmax()  # Get the index position at which max probability occurs

        if class_score > 0.2:
            cx, cy, w, h = row[0:4]
            # Construct bounding box from four values
            left = int((cx - 0.5 * w) * x_factor)
            top = int((cy - 0.5 * h) * y_factor)
            width = int(w * x_factor)
            height = int(h * y_factor)

            box = np.array([left, top, width, height])

            # Append values into the list
            confidences.append(float(confidence))
            boxes.append(box)
            classes.append(class_id)

# Debug prints
print("Confidences:", confidences)
print("Boxes:", boxes)
print("Classes:", classes)

# Clean
boxes_np = np.array(boxes).tolist()
confidences_np = np.array(confidences).tolist()

# NMS
index = cv2.dnn.NMSBoxes(boxes_np, confidences_np, 0.25, 0.45)

# Check if NMS returned any indices
if len(index) > 0:
    index = np.array(index).flatten()
    print("Indices after NMS:", index)
else:
    print("No indices returned by NMS.")

# If NMS returned indices, proceed with drawing boxes
if len(index) > 0:
    for ind in index:
        # Extract bounding box
        x, y, w, h = boxes_np[ind]
        bb_conf = int(confidences_np[ind] * 100)
        classes_id = classes[ind]
        class_name = labels[classes_id]

        text = f'{class_name}: {bb_conf}%'

        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.rectangle(image, (x, y - 30), (x + w, y), (255, 255, 255), -1)

        cv2.putText(image, text, (x, y - 10), cv2.FONT_HERSHEY_PLAIN, 0.7, (0, 0, 0), 1)

    from google.colab.patches import cv2_imshow
    cv2_imshow(image)
else:
    print("No boxes to draw.")

index

for ind in index:
    # extract bounding box
    x, y, w, h = boxes_np[ind]
    bb_conf = int(confidences_np[ind] * 100)
    classes_id = classes[ind]
    class_name = labels[classes_id]

    text = f'{class_name}: {bb_conf}%'

    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    cv2.rectangle(image, (x, y - 30), (x + w, y), (255, 255, 255), -1)

    cv2.putText(image, text, (x, y - 10), cv2.FONT_HERSHEY_PLAIN, 0.7, (0, 0, 0), 1)

!pip install google.colab.patches
from google.colab.patches import cv2_imshow # Import the patch for imshow

# ... (rest of your code)

cv2_imshow(img)
cv2_imshow(image)

"""For example, here we download and display a PNG image of the Colab logo:"""